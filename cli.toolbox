


# file: cli.toolbox
# author: jackam@github
# description: searchable toolbox for CLI commands 

############################
# TOOL TEMPLATE - COPY BELOW
############################

#@ <tool-name>.tool
#t <tags>
#d <optional: description>
<commands>
#n
- <notes>
@#

############################
# END TEMPLATE 
############################


#@ awk.tool
#t awk csv row column spreadsheet regex scan
#d line-by-line scan: /pattern/ {action}
# prints line matching pattern
awk '/<pattern>/ {print}' 	

awk '/#@/,/#@' <filename>

awk -v tag="ssh" '
	/#@/ {inblock=1; block=""}
	{block=block + $0 "\n"}
	/#t/ && index($0, tag) {inblock=1}
	/@#/ && inblock {print block}
' <filename> 
#-F flag specifies field separator, $1 prints first column
awk -F ':' '{print $1}' /etc/passwd

awk '
	/<pattern>/ {
		while (match($0, /[0-9]+/)) {
			print substr($0, RSTART, RLENGTH)
			$0 = substr($0, RSTART + RLENGTH)
		}
	}
' <filename>
#n
top level logic:

for each line in file
	if line matches pattern
		perform action
@#

#@ bash.tool
#t bash cli shell
#d quick command/syntax ref.
# read user input
read -p "What is your name" NAME
#n
- <notes>
@#

#@ ebook-convert.tool
#t macos epub ebook convert calibre pdf conversion brew
#d convert pdf-to-epub
ebook-convert <book.pdf> <new-book.epub>
#n
- ebook-convert is a calibre cli tool, calibre must be installed 
@#


#@ find.tool
#t find search recursive
#d 
# -i ignore case, name directory or file 
# --> don't show access denied messages
find . -iname "*toolbox*" 2>/dev/null

# -type f/d for file or directory, -i ignore case
find . -type f -iname "*tool*"
find . -type d -name "*Tool*"
#n
@#

#@ git.tool
#t git repo commit
#d launch repo
git init
git remote add origin <url>
git add --all             
git commit -m "Initial commit"
git branch -M main
git push -u origin main

# show commit logs with branch visuals
git log --graph
#n commit style
+  -> added / new feature / new tool
~  -> modified / updated / tweaked / improved
-  -> removed / cleaned / deprecated
*  -> documentation / notes / context / metadata
@#

#@ grep.tool
#t search grep 
#d 
grep -i "*<string>*"
grep -i "^<string>*"
#n
# inception of grep by ken thompson
- g/re/p -> global/regex/print
@#

#@ network.tool
#t lsof netstat ifconfig net troubleshoot network net
#d basic commands to isolate interface issues
# release ip: set interface to BOOTP release the ip
sudo ipconfig set en0 BOOTP
# set interface to recieve an ip
sudo ipconfig set en0 DHCP

#flush dns
sudo dscacheutil -flushcache;
sudo killall -HUP mDNSResponder

# -rn show routing table and numeric ipv4 address, not hostname
netstat -rn -f inet | grep utun

# list open files/sockets using utun
lsof | grep "utun"

#kill processes using utun
killall rapportd
killall identityservicesd

#verify pids have changed for both rapportd and identityservicesd
lsof | grep "utun"
#n
VPN: the quickest solution for internet connectivity issues is to get a new ip address via ipconfig BOOTP -> DHCP
@#

#@ ssh.tool
#t key keygen ssh agent
#d create key & add to keyring
ssh-keygen -t ed25519 -f <hostname>
eval $(ssh-agent -s)
ssh-add $HOME/.ssh/<private_key>

# remote connect into headless server
# check/start ssh system status
sudo systemctl status/start ssh.service
# allow ssh connection through firewall
sudo ufw allow ssh
# connect to headless server's user account
# -vvv to get detailed log
ssh -vvv <user>@192.168.200.148
# fetch ssh.pub file if ssh login doesn't work
scp <user>@192.168.200.148:~/.ssh/<ssh_key>.pub ~/.ssh/<ssh_key>.pub

#n
- eval ssh-agent with -s so env vars export
@#


